{"version":3,"sources":["Draggable.js","DraggableBox.js","App.js","serviceWorker.js","index.js"],"names":["Drag","ref","useEffect","target","current","currentX","currentY","initialX","initialY","offsetX","offsetY","addEventListener","onMousedown","removeEventListener","window","onMouseUp","onMouseMove","e","type","touches","clientX","clientY","style","transform","concat","DraggableBox","useRef","Draggable","react_default","a","createElement","className","App","src_DraggableBox_0","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8MAuEeA,QArEF,SAACC,GACZC,oBAAU,WACR,IAAMC,EAASF,EAAIG,QAEnB,GAAKD,EAAL,CAIA,IAEIE,EACAC,EACAC,EACAC,EALAC,EAAU,EACVC,EAAU,EAiDd,OAHAP,EAAOQ,iBAAiB,YAAaC,GACrCT,EAAOQ,iBAAiB,aAAcC,GAE/B,WACLT,EAAOU,oBAAoB,YAAaD,GACxCT,EAAOU,oBAAoB,aAAcD,GACzCE,OAAOD,oBAAoB,UAAWE,GACtCD,OAAOD,oBAAoB,YAAaG,GACxCF,OAAOD,oBAAoB,WAAYE,GACvCD,OAAOD,oBAAoB,YAAaG,IAjD1C,SAASJ,EAAYK,GACJ,eAAXA,EAAEC,MACJX,EAAWU,EAAEE,QAAQ,GAAGC,QAAUX,EAClCD,EAAWS,EAAEE,QAAQ,GAAGE,QAAUX,EAClCI,OAAOH,iBAAiB,YAAaK,GACrCF,OAAOH,iBAAiB,WAAYI,KAEpCR,EAAWU,EAAEG,QAAUX,EACvBD,EAAWS,EAAEI,QAAUX,EACvBI,OAAOH,iBAAiB,YAAaK,GACrCF,OAAOH,iBAAiB,UAAWI,IAIvC,SAASC,EAAYC,GACJ,cAAXA,EAAEC,MACJb,EAAWY,EAAEE,QAAQ,GAAGC,QAAUb,EAClCD,EAAWW,EAAEE,QAAQ,GAAGE,QAAUb,IAElCH,EAAWY,EAAEG,QAAUb,EACvBD,EAAWW,EAAEI,QAAUb,GAGzBC,EAAUJ,EACVK,EAAUJ,EACVH,EAAOmB,MAAMC,UAAb,aAAAC,OAAsCnB,EAAtC,QAAAmB,OAAqDlB,EAArD,OAGF,SAASS,EAAUE,GACjBV,EAAWF,EACXG,EAAWF,EACI,aAAXW,EAAEC,MACJJ,OAAOD,oBAAoB,YAAaG,GACxCF,OAAOD,oBAAoB,WAAYE,KAEvCD,OAAOD,oBAAoB,YAAaG,GACxCF,OAAOD,oBAAoB,UAAWE,MAezC,CAACd,MCvDSwB,SATM,WACnB,IAAMxB,EAAMyB,iBAAO,MAGnB,OAFAC,EAAU1B,GAEH2B,EAAAC,EAAAC,cAAA,OAAK7B,IAAKA,EAAK8B,UAAU,gBAAzB,eCGMC,MARf,WACE,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACG,EAAD,QCMcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2885e336.chunk.js","sourcesContent":["import { useEffect } from 'react';\n\nconst Drag = (ref) => {\n  useEffect(() => {\n    const target = ref.current;\n\n    if (!target) {\n      return;\n    }\n\n    let offsetX = 0;\n    let offsetY = 0;\n    let currentX;\n    let currentY;\n    let initialX;\n    let initialY;\n\n    function onMousedown(e) {\n      if (e.type === \"touchstart\") {\n        initialX = e.touches[0].clientX - offsetX;\n        initialY = e.touches[0].clientY - offsetY;\n        window.addEventListener('touchmove', onMouseMove);\n        window.addEventListener('touchend', onMouseUp);\n      } else {\n        initialX = e.clientX - offsetX;\n        initialY = e.clientY - offsetY;\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('mouseup', onMouseUp);\n      }\n    }\n\n    function onMouseMove(e) {\n      if (e.type === \"touchmove\") {\n        currentX = e.touches[0].clientX - initialX;\n        currentY = e.touches[0].clientY - initialY;\n      } else {\n        currentX = e.clientX - initialX;\n        currentY = e.clientY - initialY;\n      }\n\n      offsetX = currentX;\n      offsetY = currentY;\n      target.style.transform = `translate(${currentX}px, ${currentY}px)`;\n    }\n\n    function onMouseUp(e) {\n      initialX = currentX;\n      initialY = currentY;\n      if (e.type === \"touchend\") {\n        window.removeEventListener('touchmove', onMouseMove);\n        window.removeEventListener('touchend', onMouseUp);\n      } else {\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n      }\n    }\n\n    target.addEventListener('mousedown', onMousedown);\n    target.addEventListener('touchstart', onMousedown);\n\n    return () => {\n      target.removeEventListener('mousedown', onMousedown);\n      target.removeEventListener('touchstart', onMousedown);\n      window.removeEventListener('mouseup', onMouseUp);\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener(\"touchend\", onMouseUp);\n      window.removeEventListener(\"touchmove\", onMouseMove);\n    };\n  }, [ref]);\n}\n\nexport default Drag;\n","import React, { useRef } from 'react';\nimport Draggable from './Draggable'\nimport './DraggableBox.css'\n\nconst DraggableBox = () => {\n  const ref = useRef(null);\n  Draggable(ref);\n\n  return <div ref={ref} className=\"draggableBox\">\n    Draggable\n  </div>;\n};\n\nexport default DraggableBox;\n\n","import React from 'react';\nimport DraggableBox from './DraggableBox';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DraggableBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}